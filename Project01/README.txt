Nicholas Graham
ngraham@u.rochester.edu
CSC 172
Project 1
Lab TA: Kate Zeng Zhiming
Lab Session: Wednesday 6:15 - 7:30

For Project one we had to build a text based game of Mastermind. I used a similar method to one that is described on the wikipedia page for mastermind, where it looks for the guess that removes the most options, and removes options that could not possibly be the guess based on the users feedback until the code is found. I started by creating a method that would create all the possible guesses. I wanted to be able to delete options, and ended up using a linked list. It took me a long time to figure out how to fill the lists. My first attempt used for loops just to test it, but that would support a variable number of tokens per guess, so I had to think of another way to go about it. Going off of work done in workshops, and some discussion of the theory with other students, we realized that the for loops could be replaced with recursion, where you start at index 0 and keep moving in one until you hit the end of the list. I then wrote up the code for that, and started working on the logic aspects of the game. I started by writing a method that compared the guess to each item in the list, and if there weren't the same number of items in the same spot, then the item was deleted. I then had this method called in the response method. At this point I moved on and implemented a terrible version of the nextGuess method, which just returned the item in the middle of the linked list. Then I had a semi-funcioning version of the game. I then used this to test my current methods and see if they all worked. I then moved on to creating the method to check for the right colors in the wrong positions. This method took the majority of the time I spent working on this project. The algorithm I ended up implementing is a little weird, and I'm sure there is a better way to do it, but I couldn't think if it. What I do is start by counting the number of time each option is repeated in the guess code, then for every code in the list I do the same thing. Then every option in the guess code is compared to the every option in the current code being tested. If they are equal a separate counter for each option is maintained. Then the number of items equal to item in the other code is divided by the max of the number of times it is repeated in either the guess code or the current code. Those values are then summed up, and that sum is compared to the value stated by the player, and if they don't match the code is removed from the list. I then Added this to the response method and tested the game to see how if it all worked. I then decided to rewrite the next guess method to speed up the process of getting the correct answer. I decided to base it off the theory stated on the wikipedia page. I wrote methods similar to the correct color, correct position and the correct color wrong position methods that instead of deleting the wrong ones just kept track of how many would have been deleted. The guess that would remove the most nodes was the one that was selected. This improved the game a little and allowed the computer to get the answer a little bit faster.

This game has been tested up to 8 items in 8 spaces, although I don't recommend going over 6 items in 6 spaces. While the code works, the runtime of this isn't pretty, and it can take a long time to play at the larger numbers. 7 items with 7 spots took around 2 hours and 23 minutes.

The Code.java file is used to define the nodes (codes) for the linked list. The PossibleCodes.java file is the linked list, and contains the expected methods, as well as handeling the methods for comparing the item and the position. The mm.java file is the interface that was given to us. The MasterMind.java file is the file that handles the upper level of the gameplay. It contanes the method that fills the list, and the methods that allow for a new game, a new guess, and to handle the users response. The Game.java file contanes the main method and all the things that directly interact with the player.

To compile this project run: javac *.java
To run the game enter: java Game
