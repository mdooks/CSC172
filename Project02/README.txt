Nicholas Graham
ngraham@u.rochester.edu
CSC 172
Project 2
Lab TA: Kate Zeng Zhiming
Lab Session: Wednesday 6:15 - 7:30

For this project we had to build a postfix calculator that read in infix expressions from a text document, converted them, then printed the output to another file. I did this by following the Shunting-Yard method as described on the wikipedia page, as well as on the lab assignment. The post fix calculator was then implemented based off the instructions in the lab assignment. I started with the PostFix.java file. In this I set up the file io, and then send each line, or equation, to the ShuntingYard class where it is converted to postfix. Then it takes the postfix expression, and sends it to the Calc.java class where the math is done. finally the result is returned and written written to the output file. For the Shunting Yard file a Stack and a Queue are set up to hold the tokens of the expression while it is being rewritten to postfix. It did this by first creating an array of tokens from the string. Each token was either a number, or an operator. If the token was a number it was thrown into the queue, but if it was an operator, then there were a few tests that had to be run. If it was a close parentheses, all the operators on the stack were popped until an open parenthesis was found. If it was an open parenthesis it was pushed right onto the stack. If it was any other operator, and the stack wasn't empty, every item in the stack was popped until an item of lower precedence was found, then the new item was pushed. and finally if the stack was empty, the item was pushed to the stack directly. There were a few helping methods written in this class, one that generated the array of tokens. It did this by adding the the tokens to the array splitting them when it hits an operator or a space. I also wrote a method to determine if the precedence of one token is greater than another. Next in the Calc.java file I started with calc method, which took the queue and ran through it, pushing each number to a stack, until an operator was found, then it popped the appropriate number of numbers from the stack, then passed the two numbers and the operator to a math method. The math method converted the Strings to doubles and then checked to see what the operator is, and then preformed the operation and returned the answer, which was pushed to the stack. When it was all over, there is only one number in the stack, and if it is the final answer. That is returned and sent back to write it to the file. I also wrote a method that checked to see if a token was on operator, and if it was, returned true. This method was used throughout the program.

The program worked for the test file, and for all the test I created.

To compile this project run: javac *.java
To run the program enter: java InfixCalculator equations.txt output2.txt
To run the program enter: java InfixCalculator infix_expr_short.txt output.txt
