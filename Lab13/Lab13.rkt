(list 1 2 3)
(list 1 2 3 5 6 7 8)
(define list1 (list 0 1 2 3 4 5 6 7 8 9))
(display list1)
(newline)
(list "abe" "bea" "cal" "deb")
(define bintree (list (list 1 2) (list 3 4)))
(display bintree)
(newline)
(define arry3x3 (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))
(display arry3x3)
(newline)
'()
(list)
(null? '())
(null? (list))
(null? (list 1 2 3))
(car (list 1 2 3))
(cdr (list 1 2 3))
(define list2 (list 0 1 2 3 4 5 6 7 8 9))
(display list2)
(newline)
(car list2)
(cdr list2)
(cdr (cdr list2))
(cdr (cdr (cdr list2)))
(cdr (cdr (cdr (cdr list2))))

(display list2)
(newline)
(cdr list2)
(cddr list2)
(cdddr list2)
(car list2)
(cadddr list2)
(define list3 (list
 (list (list 1 2) (list 3 4) (list 5 6) )
 (list (list 7 8) (list 9 10) (list 11 12) )
 (list (list 13 14) (list 15 16) (list 17 18 ) )
 )
)
(display list3)
(newline)
(car list3)
(caar list3)
(caaar list3)
(cdr list3)
(cadr list3)
(cdar list3)
(cdadr list3)

(cons 1 2)
(car (cons 1 2))
(cdr (cons 1 2))
(define list4 (cons (cons 1 2) (cons 3 4)))
(display list4)
(newline)
(car list4)
(cdr list4)
(caar list4)
(cadr list4)
(cdar list4)
(cddr list4)
(cons 1 '())
(cons '() 1)
(cons 1 (cons 2 '()))
(cons 1 (cons 2 (cons 3 '())))
(cons 1 (cons 2 (cons 3 (cons 4 '()))))

(define (make-rat n d ) (cons n d))
(define (numer rat) (car rat))
(define (denom rat) (cdr rat))
(define (print-rat rat)
 (display (numer rat))
 (display "/")
 (display (denom rat))
 (newline))

(define one-half (make-rat 1 2))
(define two-forth (make-rat 2 4))
(define one-third (make-rat 1 3))
(define two-fiths (make-rat 2 5))
(define one-eighths (make-rat 1 8))
(define three-eighths (make-rat 3 8))
(define one-ninth (make-rat 1 9))
(define seven-eighths (make-rat 7 8))
(define one-seventh (make-rat 1 7))
(define three-ninth (make-rat 3 9))
(define two-eighths (make-rat 2 8))
(define six-seventh (make-rat 6 7))
(display one-half)
(newline)
(print-rat one-half)
(display one-third)
(newline)
(print-rat one-third)

(print-rat two-forth)
(print-rat two-fiths)
(print-rat one-eighths)
(print-rat one-ninth)
(print-rat seven-eighths)
(print-rat one-seventh)

(print-rat three-ninth)
(print-rat two-eighths)
(print-rat six-seventh)

(define (mul-rat rat1 rat2)
  (make-rat (* (numer rat1)(numer rat2)) (* (denom rat1) (denom rat2)))
  )
(define (div-rat rat1 rat2)
  (make-rat (* (numer rat1)(denom rat2)) (* (denom rat1) (numer rat2)))
  )
(define (add-rat rat1 rat2)
  (make-rat 
   (+ (* (numer rat1)(denom rat2)) (* (numer rat2)(denom rat1)))
   (* (denom rat1)(denom rat2))
   )
  )

(define (sub-rat rat1 rat2)
  (make-rat 
   (- (* (numer rat1)(denom rat2)) (* (numer rat2)(denom rat1)))
   (* (denom rat1)(denom rat2))
   )
  )
(define (equal-rat rat1 rat2)
  
   (= (* (numer rat1)(denom rat2)) (* (numer rat2)(denom rat1)))
   
  )

(print-rat (add-rat one-third two-fiths))
(print-rat (sub-rat one-eighths one-ninth))
(print-rat (div-rat seven-eighths three-ninth))
(print-rat (mul-rat two-eighths six-seventh))
(equal-rat one-half two-forth)
(equal-rat one-half one-eighths)